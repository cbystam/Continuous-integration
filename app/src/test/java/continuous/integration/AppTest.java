/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package continuous.integration;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.*;
import java.util.Formatter.BigDecimalLayoutForm;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import continuous.Models.BuildInfo;


class AppTest {
    
    /**
     * This tests to check if the URI is wrong. Meaning it is not available or does not exist.
     * The method clone repo takes an URI and branch name as parameters.
     */
    @Test void wrongURI() throws GitAPIException {
        Exception ex = assertThrows(GitAPIException.class, () -> {
            util.cloneRepo("https://github.com/arnbaeck/assig2222", "testing1");
        });
    }
    /**
     * This tests to check if the Branch is wrong. Meaning it does not exist or is mispelled.
     * The method clone repo takes an URI and branch name as parameters.
     */
    @Test void wrongBranch() throws GitAPIException {
        Exception ex = assertThrows(GitAPIException.class, () -> {
            util.cloneRepo("https://github.com/arnbaeck/assig2", "testing111");
        });
    }


     /**
     *Test if a successful clone is made by checking a key word in a txt file. If the clone is successful,
     * the key word will be found.
     */
    @Test void cloneTest() throws GitAPIException, IOException {
        String realString = "testString123";
        Git git = util.cloneRepo("https://github.com/arnbaeck/assig2", "testing1");
        File file = new File("assig2\\app\\src\\test\\java\\assig2\\test.txt");
        BufferedReader br = new BufferedReader(new FileReader(file));
        String s = br.readLine();
        br.close();
        git.getRepository().close();
        util.deleteRepo(new File("assig2"));
        assertEquals(s, realString);
    }

       /**
        * A successful test for "buildRepo" function
        * This test checks that the function "buildRepo" is successfully building a repo 
        */
    @Test void buildSuccess() throws GitAPIException {
            Git git = util.cloneRepo("https://github.com/AhmetOguzEngin/Test", "test1");
            BuildInfo buildInfo = util.buildRepo("Test");
            git.getRepository().close();
            util.deleteRepo(new File("Test"));
            assertEquals("SUCCESSFUL", buildInfo.status);
            
    }


        /**
        * A failure test to for "buildRepo" function
        * This test checks that the function "buildRepo" is failing while building a repo
        */    
    @Test void buildFailure() throws GitAPIException {
            Git git = util.cloneRepo("https://github.com/AhmetOguzEngin/Test", "test2");
            BuildInfo buildInfo = util.buildRepo("Test");
            git.getRepository().close();
            System.out.println("a");
            util.deleteRepo(new File("Test"));
            assertEquals("FAILURE", buildInfo.status);
    }


}
